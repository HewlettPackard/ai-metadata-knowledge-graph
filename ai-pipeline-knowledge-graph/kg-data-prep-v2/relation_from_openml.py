###
# Copyright (2024) Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###


import pandas as pd
import csv
import os


"""
This script creates csv files for relationships between nodes for openml nodes
This script is dependent on the csv generated by python script named nodes_from_openml.py. 
"""


# Source data path
SRC_DATA_PATH = 'kg-data/open-ml/nodes' 

# CSV files created will be stored in both the places
DEST_LUSTRE_PATH = 'kg-data/open-ml/relationships'
DEST_LOCAL_PATH = 'kg-dataopen-ml/relationships'


# Helper Functions
def tuple_to_csv(headers, tuples_list, filepaths):
    """
    headers: column names of csv file to be generated. Type: list of strings
    tuple_list: list of tuples, where each tuple is a row
    filepath: destination filepath of the csv file to be saved
    """
    for filepath in filepaths:
        with open(filepath,'w') as out:
            csv_out=csv.writer(out)
            csv_out.writerow(headers)
            for row in tuples_list:
                csv_out.writerow(row)
        print("File saved at:", filepath)


def rel_pipeline_task():
    pipeline_filepath = os.path.join(SRC_DATA_PATH, 'pipelines.csv')
    df_pipeline = pd.read_csv(pipeline_filepath)

    task_filepath = os.path.join(SRC_DATA_PATH, 'tasks.csv')
    df_task = pd.read_csv(task_filepath)

    # create a temp dict that maps openml_task_id to generated task_id
    mapper = {}
    for i in range(0,len(df_task)):
        mapper[str(df_task['src_id'][i])] = df_task['task_id'][i]
    
    tuples_list = []
    for idx in range(0,len(df_pipeline)):
        print("Pipeline--Task. Counter:", str(idx) + '/' + str(len(df_pipeline)))
        openml_task_id = str(df_pipeline['openml_task_id'][idx])
        tuples_list.append((df_pipeline['pipeline_id'][idx], mapper[openml_task_id]))
    
    filepath1 = os.path.join(DEST_LUSTRE_PATH, 'rel-pipeline-task.csv')
    filepath2 = os.path.join(DEST_LOCAL_PATH, 'rel-pipeline-task.csv')
    tuple_to_csv(headers=['pipeline_id', 'task_id'], tuples_list=tuples_list, filepaths=[filepath1, filepath2])



def rel_pipeline_framework():
    pipeline_filepath = os.path.join(SRC_DATA_PATH, 'pipelines.csv')
    df_pipeline = pd.read_csv(pipeline_filepath)

    framework_filepath = os.path.join(SRC_DATA_PATH, 'frameworks.csv')
    df_framework = pd.read_csv(framework_filepath)

    # create a temp dict that maps openml_run_id to generated pipeline id
    mapper = {}
    for i in range(0,len(df_pipeline)):
        mapper[str(df_pipeline['openml_run_id'][i])] = df_pipeline['pipeline_id'][i]

    tuples_list = []
    for idx in range(0,len(df_framework)):
        print("Pipeline--Framework. Counter:", str(idx) + '/' + str(len(df_framework)))
        openml_run_id = str(df_framework['openml_run_id'][idx])
        tuples_list.append((mapper[str(openml_run_id)], df_framework['framework_id'][idx]))

    filepath1 = os.path.join(DEST_LUSTRE_PATH, 'rel-pipeline-framework.csv')
    filepath2 = os.path.join(DEST_LOCAL_PATH, 'rel-pipeline-framework.csv')
    tuple_to_csv(headers=['pipeline_id', 'framework_id'], tuples_list=tuples_list, filepaths=[filepath1, filepath2])


    

def rel_pipeline_stage():
    stage_filepath = os.path.join(SRC_DATA_PATH, 'stages.csv')
    df = pd.read_csv(stage_filepath)
    
    tuples_list = []
    for idx in range(0,len(df)):
        print("Pipeline--Stage. Counter:", str(idx) + '/' + str(len(df)))
        tuples_list.append((df['pipeline_id'][idx], df['stage_id'][idx]))

    filepath1 = os.path.join(DEST_LUSTRE_PATH, 'rel-pipeline-stage.csv')
    filepath2 = os.path.join(DEST_LOCAL_PATH, 'rel-pipeline-stage.csv')
    tuple_to_csv(headers=['pipeline_id', 'stage_id'], tuples_list=tuples_list, filepaths=[filepath1, filepath2])


def rel_stage_execution():
    execution_filepath = os.path.join(SRC_DATA_PATH, 'executions.csv')
    df = pd.read_csv(execution_filepath)

    tuples_list = []
    for idx in range(0,len(df)):
        print("Stage--Execution. Counter:" + str(idx) + '/' + str(len(df)))
        tuples_list.append((df['stage_id'][idx], df['execution_id'][idx]))

    filepath1 = os.path.join(DEST_LUSTRE_PATH, 'rel-stage-execution.csv')
    filepath2 = os.path.join(DEST_LOCAL_PATH, 'rel-stage-execution.csv')
    tuple_to_csv(headers=['stage_id', 'execution_id'], tuples_list=tuples_list, filepaths=[filepath1, filepath2])
    

def rel_execution_metric():
    metric_filepath = os.path.join(SRC_DATA_PATH, 'metrics.csv')
    df = pd.read_csv(metric_filepath)

    tuples_list = []
    for idx in range(0,len(df)):
        print("Execution--Metric. Counter:", str(idx) + '/' + str(len(df)))
        tuples_list.append((df['execution_id'][idx], df['metric_id'][idx]))

    filepath1 = os.path.join(DEST_LUSTRE_PATH, 'rel-execution-metric.csv')
    filepath2 = os.path.join(DEST_LOCAL_PATH, 'rel-execution-metric.csv')
    tuple_to_csv(headers=['execution_id', 'metric_id'], tuples_list=tuples_list, filepaths=[filepath1, filepath2])


def rel_execution_artifact():
    artifact_filepath = os.path.join(SRC_DATA_PATH, 'artifacts.csv')
    df = pd.read_csv(artifact_filepath)

    tuples_list = []
    for idx in range(0,len(df)):
        print("Execution--Artifact. Counter:", str(idx) + '/' + str(len(df)))
        tuples_list.append((df['execution_id'][idx], df['artifact_id'][idx]))

    filepath1 = os.path.join(DEST_LUSTRE_PATH, 'rel-execution-artifact.csv')
    filepath2 = os.path.join(DEST_LOCAL_PATH, 'rel-execution-artifact.csv')
    tuple_to_csv(headers=['execution_id', 'artifact_id'], tuples_list=tuples_list, filepaths=[filepath1, filepath2])


def rel_artifact_dataset():
    artifact_filepath = os.path.join(SRC_DATA_PATH, 'artifacts.csv')
    df_artifact = pd.read_csv(artifact_filepath)

    dataset_filepath = os.path.join(SRC_DATA_PATH, 'datasets.csv')
    df_dataset = pd.read_csv(dataset_filepath)

    # create a temp dict that maps openml_dataset_id to generated dataset id
    mapper = {}
    for i in range(0,len(df_dataset)):
        mapper[str(df_dataset['src_id'][i])] = df_dataset['dataset_id'][i]
    
    tuples_list = []
    for idx in range(0,len(df_artifact)):
        print("Artifact--Dataset. Counter:" + str(idx) + '/' + str(len(df_artifact)))
        openml_dataset_id = str(df_artifact['openml_dataset_id'][idx])
        try:
            tuples_list.append((df_artifact['artifact_id'][idx], mapper[openml_dataset_id]))
        except KeyError:
            pass
    
    filepath1 = os.path.join(DEST_LUSTRE_PATH, 'rel-artifact-dataset.csv')
    filepath2 = os.path.join(DEST_LOCAL_PATH, 'rel-artifact-dataset.csv')
    tuple_to_csv(headers=['artifact_id', 'dataset_id'], tuples_list=tuples_list, filepaths=[filepath1, filepath2])   
    


def rel_artifact_model():
    artifact_filepath = os.path.join(SRC_DATA_PATH, 'artifacts.csv')
    df_artifact = pd.read_csv(artifact_filepath)

    model_filepath = os.path.join(SRC_DATA_PATH, 'models.csv')
    df_model = pd.read_csv(model_filepath)

    # create a temp dict that maps openml_flow_id to generated model id
    mapper = {}
    for i in range(0,len(df_model)):
        mapper[str(df_model['src_id'][i])] = df_model['model_id'][i]

    tuples_list = []
    for idx in range(0,len(df_artifact)):
        try:
            print("Arifact--Model. Counter:", str(idx) + '/' + str(len(df_artifact)))
            openml_flow_id = str(df_artifact['openml_flow_id'][idx])
            tuples_list.append((df_artifact['artifact_id'][idx], mapper[openml_flow_id]))
        except KeyError:
            # KeyError for flow_id 4280
            pass
    
    filepath1 = os.path.join(DEST_LUSTRE_PATH, 'rel-artifact-model.csv')
    filepath2 = os.path.join(DEST_LOCAL_PATH, 'rel-artifact-model.csv')
    tuple_to_csv(headers=['artifact_id', 'model_id'], tuples_list=tuples_list, filepaths=[filepath1, filepath2])  


def rel_artifact_metric():
    metric_filepath = os.path.join(SRC_DATA_PATH, 'metrics.csv')
    df = pd.read_csv(metric_filepath)

    tuples_list = []
    for idx in range(0,len(df)):
        print("Artifact--Metric. Counter:" + str(idx) + '/' + str(len(df)))
        tuples_list.append((df['artifact_id'][idx], df['metric_id'][idx]))

    filepath1 = os.path.join(DEST_LUSTRE_PATH, 'rel-artifact-metric.csv')
    filepath2 = os.path.join(DEST_LOCAL_PATH, 'rel-artifact-metric.csv')
    tuple_to_csv(headers=['artifact_id', 'metric_id'], tuples_list=tuples_list, filepaths=[filepath1, filepath2])       



def rel_model_parameter():
    model_filepath = os.path.join(SRC_DATA_PATH, 'models.csv')
    df_model = pd.read_csv(model_filepath)

    parameter_filepath = os.path.join(SRC_DATA_PATH, 'parameters.csv')
    df_parameter = pd.read_csv(parameter_filepath)

    # create a temp dict that maps openml_flow_id to generated model id
    mapper = {}
    for i in range(0,len(df_model)):
        mapper[str(df_model['src_id'][i])] = df_model['model_id'][i]
    
    tuples_list = []
    for idx in range(0,len(df_parameter)):
        print("Model--Parameters. Counter:" + str(idx) + '/' + str(len(df_parameter)))
        openml_flow_id = str(df_parameter['openml_flow_id'][idx])
        try:
            tuples_list.append((mapper[openml_flow_id], df_parameter['parameter_id'][idx]))
        except KeyError:
            # KeyError for flow_id 4280
            print("KeyError:", openml_flow_id)
            pass
    filepath1 = os.path.join(DEST_LUSTRE_PATH, 'rel-model-parameter.csv')
    filepath2 = os.path.join(DEST_LOCAL_PATH, 'rel-model-parameter.csv')
    tuple_to_csv(headers=['model_id', 'parameter_id'], tuples_list=tuples_list, filepaths=[filepath1, filepath2]) 
    


def rel_pipeline_report():
    report_filepath = os.path.join(SRC_DATA_PATH, 'reports.csv')
    df = pd.read_csv(report_filepath)

    tuples_list = []
    for idx in range(0,len(df)):
        tuples_list.append((df['pipeline_id'][idx], df['report_id'][idx]))

    filepath1 = os.path.join(DEST_LUSTRE_PATH, 'rel-pipeline-report.csv')
    filepath2 = os.path.join(DEST_LOCAL_PATH, 'rel-pipeline-report.csv')
    tuple_to_csv(headers=['pipeline_id', 'report_id'], tuples_list=tuples_list, filepaths=[filepath1, filepath2])        







# FUNCTION CALLS
rel_pipeline_framework()
rel_pipeline_task()
rel_pipeline_stage()
rel_stage_execution()
rel_execution_metric()
rel_execution_artifact()
rel_artifact_dataset()
rel_artifact_model()
rel_artifact_metric()
rel_model_parameter()
